{"data":{"site":{"siteMetadata":{"title":"鹊巢小筑","author":"Sean"}},"markdownRemark":{"id":"93a89dd8-881f-510b-8792-e552e7c5b7ac","excerpt":"这是介绍 JavaScript 中类型转换的连续三篇 Blog 中的第一篇，希望对读者在这个问题的理解上有帮助，如果你需要更详尽的阐述或说明，请阅读 Kyle Simpson 的 《你不知道的 JavaScript》 。 JavaScript 中的类型转换分为两种类型，一种是显性的类型转换(type casting…","html":"<p>这是介绍 JavaScript 中类型转换的连续三篇 Blog 中的第一篇，希望对读者在这个问题的理解上有帮助，如果你需要更详尽的阐述或说明，请阅读 Kyle Simpson 的<a href=\"https://www.amazon.cn/dp/B07BW23G4B/ref=sr_1_1?__mk_zh_CN=%E4%BA%9A%E9%A9%AC%E9%80%8A%E7%BD%91%E7%AB%99&#x26;keywords=%E4%BD%A0%E4%B8%8D%E7%9F%A5%E9%81%93%E7%9A%84javascript&#x26;qid=1554183377&#x26;s=gateway&#x26;sr=8-1\">《你不知道的 JavaScript》</a>。</p>\n<p>JavaScript 中的类型转换分为两种类型，一种是显性的类型转换(type casting / explicit coercion)，另外一种是隐性的类型转换(coercion / implicit coercion)。在这两种类型转换中，显性转换比较好识别和理解，比如 <code class=\"language-text\">String(32)</code>，<code class=\"language-text\">Boolean(0)</code>，在看到这样的代码的时候，开发者可以很清晰直观的辨别出来类型转换的操作。相比之下隐性的转换就晦涩很多。显式和隐式是相对的概念，对一个 JavaScript 专家，甚至是 JS 标准的制定者，可能所有的隐性转换在他们看来都是显式的转换，因为他们掌握了所有的 JavaScript 细节，在他们看来一切都是清晰明了的。但是我们大多数人都不是专家或者标准制定者，这个文章的目标读者是对 JavaScript 有良好理解的普通程序员。还有一点要明确的是，大多数情况下，程序员写的代码都会有其它人来阅读或修改，即使你能理解所有不同的类型转换，想想你们团队中的新成员，想想将来维护你的代码的人，有可能他们很难理解你代码中出现的隐性类型转换，这一点必须要考虑到。</p>\n<h5>值的抽象操作</h5>\n<p>JavaScript 中类型转换的结果只可能是<code class=\"language-text\">String</code>、<code class=\"language-text\">Number</code>、<code class=\"language-text\">Boolean</code>三个类型中的一种。不同的类型如何转换为这三种类型的值，ES5 标准定义了几种<strong>抽象操作</strong> <code class=\"language-text\">ToString</code>、<code class=\"language-text\">ToNumber</code>，<code class=\"language-text\">ToBoolean</code> 和 <code class=\"language-text\">ToPrimitive</code>。抽象操作是 ES5 标准中“仅内部操作”的另一种说法。任何非 String 类型的值转换为 String 时，转换的过程由<code class=\"language-text\">ToString</code>\b 抽象操作来处理。同样的原理作用于<code class=\"language-text\">ToNumber</code>和<code class=\"language-text\">ToBoolean</code>。</p>\n<ul>\n<li>\n<p>ToString</p>\n<p>每一种原始值，标准中给出了 ToString 操作的结果。null 的结果是<code class=\"language-text\">null</code>，undefined 的结果是<code class=\"language-text\">undefined</code>，布尔 true 的结果是<code class=\"language-text\">true</code>。数值类型的值会被转换为对应的字符串的结果，太大或太小的数字会用科学计数法来表示。</p>\n<p>普通的对象，默认的 toString()方法会返回对象的内部的<code class=\"language-text\">[[Class]]</code>，比如<code class=\"language-text\">[object Object]</code>。默认的 toString 方法在原型链<code class=\"language-text\">Object.prototype.toString()</code>上，可以用自定义方法覆盖这个方法。这样当对象需要转换成 String 类型的时候，自定义的 toString 方法就会生效。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token function\">String</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//输出结果 '[object Object]'</span>\n\n<span class=\"token function\">String</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n<span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token string\">'abc'</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//输出结果 'abc'</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Array 对象上的 toString 方法覆盖了<code class=\"language-text\">Object.prototype</code>上的默认方法。把 Array 转换为 String 的结果是，一个包含所有数组元素的字符串，每个元素之间用逗号分隔。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token function\">String</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 输出结果 '1, 2, 3'</span>\na<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 输出结果 '1, 2, 3'</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span></span></pre></div>\n<p><code class=\"language-text\">toString()</code>方法既可以直接调用，也可以在需要将 Array 转换为 String 的地方自动调用。</p>\n<p><code class=\"language-text\">JSON.stringify()</code>工具方法可以将目标参数转换成 JSON 兼容的字符串形式。转换的规则和<code class=\"language-text\">ToString</code>有相同和不同的地方。对于简单的值，<code class=\"language-text\">stringify</code>和<code class=\"language-text\">ToString</code>的结果是一样的。一些值被认为不兼容 JSON，这样的值有<code class=\"language-text\">undefined</code>、函数、ES6 的<code class=\"language-text\">Symbol</code>、有循环索引的对象(比如：<code class=\"language-text\">const a = { b: a}</code>)</p>\n</li>\n</ul>","frontmatter":{"title":"JavaScript中的类型转换（上）","date":" 2019年 四月 02","tags":["JavaScript 隐性类型转换"]}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/coerce/","previous":{"fields":{"slug":"/restful-api-designing-guidelines/"},"frontmatter":{"title":"RESTFull API 的设计指南和最佳实践"}},"next":null}}