{"data":{"site":{"siteMetadata":{"title":"鹊巢小筑","author":"Sean"}},"markdownRemark":{"id":"1bdabcd5-ce83-5de9-9220-d831095cfb82","excerpt":"这是一篇 medium 上关于 RESTFull API 文章。我觉得对于刚接触 RESTFull API 的后端程序员来说这是非常好的入门文章，就把这篇文章翻译成中文后放在我的博客上，为英语不是很好，或者不能访问 medium 的同学提供方便。 原文地址点这里 。 RESTFull API…","html":"<p>这是一篇 medium 上关于 RESTFull API 文章。我觉得对于刚接触 RESTFull API 的后端程序员来说这是非常好的入门文章，就把这篇文章翻译成中文后放在我的博客上，为英语不是很好，或者不能访问 medium 的同学提供方便。<a href=\"https://hackernoon.com/restful-api-designing-guidelines-the-best-practices-60e1d954e7c9\">原文地址点这里</a>。</p>\n<h3>RESTFull API 的设计指南及最佳实践</h3>\n<p>脸书、谷歌、Github 和网飞以及其它几个科技巨头公司，允许外部的开发人员或互联网应用，通过 API（应用开发接口） 的方式使用它们的数据。\n即便你写的 API 是自己公司内部使用不提供给外部的开发人员，为自己的应用开发一套设计良好的接口总是有好处的。</p>\n<p>网上关于什么是 API 设计的最佳实践的辩论日久不休，对这个话题的争论牵扯到许多细节问题，而且没有一个正式、官方的指南。</p>\n<p>API\b 提供一个接口，开发者们通过对接口访问操作数据。设计良好的 API 使用起来非常方便，让开发者的工作轻松许多。对于开发者来说 API 就像图形界面一样（GUI），如果开发人员感觉到这个界面不是非常清晰直观，那么就会开始搜寻替代品，或者干脆就不用了。</p>\n<blockquote>\n<p>API 就像是街头艺人，而它的用户就是观众。</p>\n</blockquote>\n<h4>1) 术语解释</h4>\n<p>以下是和 REST API 密切相关的术语</p>\n<ul>\n<li>\n<p>Resource(资源)是某些资源的表示，含有与之相关的数据和用来操作数据的方法。比如：动物、学校和员工是资源，删除、添加、更新是对这些资源执行的操作。</p>\n</li>\n<li>\n<p>Collections(集合)是一系列资源的集合。比如：Companies 是 Company 资源的集合。</p>\n</li>\n<li>\n<p>URL(统一资源定位符)是资源访问的路径，而且在这个路径上可以执行一些操作。</p>\n</li>\n</ul>\n<h4>2) API endpoint(接口端点)</h4>\n<p>为了更好的理解上面的概念，我们写几个接口，比如<strong>公司</strong>里面有<strong>员工</strong></p>\n<ul>\n<li>/getAllEmployees 返回员工的数组</li>\n<li>/addNewEmployee 新增一个员工</li>\n<li>/deleteEmployee 删除一个员工</li>\n<li>/deleteAllEmployee 删除所有员工</li>\n<li>/promoteEmployee 让一个员工升职</li>\n<li>/promoteAllEmployee 让所有员工升职</li>\n</ul>\n<p>关于员工还有许多接口，每个接口执行一种操作, 当然这其中包含许多冗余的操作。当 API 的数量增加时，这种接口设计会成为维护上的负担。</p>\n<p><strong>哪里做错了？</strong>\n<br />\nURL 地址里应该只包含资源，而不包括操作。<code class=\"language-text\">/addNewEmployee</code>这个 API 地址里面不仅包含了资源<code class=\"language-text\">Employee</code>还包含了执行的操作<code class=\"language-text\">addNew</code></p>\n<p><strong>正确的做法是？</strong>\n<br />\n<code class=\"language-text\">/companies</code>像这样一个 API 地址就是一个好的例子，因为它不包含操作。但现在的问题是我们如何让服务器明白，我们在资源上要进行什么操作，是增加、删除、还是修改呢？</p>\n<p>区分不同的操作要依靠不同的 HTTP 请求方法(GET, POST, DELETE, PUT)。</p>\n<p>所有接口端点中表示资源的单词应该始终是复数形式，比如<code class=\"language-text\">companies</code> <code class=\"language-text\">schools</code>。如果需要返回单独一条数据时，我们可以在地址后面拼上 id</p>\n<ul>\n<li>HTTP 请求方法 <code class=\"language-text\">GET</code> 路径 <code class=\"language-text\">/companies</code> 应当返回含有所有公司信息的数组</li>\n<li>HTTP 请求方法 <code class=\"language-text\">GET</code> 路径 <code class=\"language-text\">/companies/34</code> 应当返回 id 为 34 的公司的信息</li>\n<li>HTTP 请求方法 <code class=\"language-text\">DELETE</code> 路径 <code class=\"language-text\">/companies/34</code> 应当删除 id 为 34 的公司的信息</li>\n</ul>\n<p>在一些少数情况下，如果资源之间有层级关系，比如不同的公司里面有不同的员工，那么接口端点会像这样:</p>\n<ul>\n<li><code class=\"language-text\">GET /companies/3/employees</code> 应该返回 id 为 3 的公司所有的员工信息</li>\n<li><code class=\"language-text\">GET /companies/3/employees/45</code> 应该返回 id 为 3 的公司中 id 为 45 的员工的信息</li>\n<li><code class=\"language-text\">DELETE /companies/3/employees/45</code> 应该删除 id 为 3 的公司中 id 为 45 的员工的信息</li>\n<li><code class=\"language-text\">POST /companies</code> 应该新建一个公司，并且返回这个新增公司的详细信息。</li>\n</ul>\n<p>这样子设计的 API 是不是简洁性和一致性更好？</p>\n<p><strong><em>结论:</em></strong>\bAPI 路径中的资源要使用复数的英语单词，并且使用不同的 HTTP 请求方法定义不同的资源操作。</p>\n<h4>HTTP 请求方法</h4>\n<p>HTTP 定义了一组请求方法，这些方法指明了需要在资源上执行的操作的类型。</p>\n<blockquote>\n<p>URL 就像一个句子，资源是名词，HTTP 请求方法是动词。</p>\n</blockquote>\n<p>最要的 HTTP 方法如下:</p>","frontmatter":{"title":"RESTFull API 的设计指南和最佳实践","date":" 2019年 二月 12","tags":["RESTFull API 最佳实践"]}}},"pageContext":{"slug":"/restful-api-designing-guidelines/","previous":{"fields":{"slug":"/what-is-this/"},"frontmatter":{"title":"JavaScript函数中的this指的到底是什么？"}},"next":null}}